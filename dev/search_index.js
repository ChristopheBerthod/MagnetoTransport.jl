var documenterSearchIndex = {"docs":
[{"location":"index.html#MagnetoTransport","page":"MagnetoTransport","title":"MagnetoTransport","text":"","category":"section"},{"location":"index.html","page":"MagnetoTransport","title":"MagnetoTransport","text":"The Julia module MagnetoTransport addresses a problem in physics: computing the linear conductivity tensor of a two-dimensional gas of electrons in a perpendicular magnetic field, the electron scattering being described by an energy-dependent, yet momentum-independent self-energy.","category":"page"},{"location":"index.html#Definition-of-the-problem","page":"MagnetoTransport","title":"Definition of the problem","text":"","category":"section"},{"location":"index.html","page":"MagnetoTransport","title":"MagnetoTransport","text":"This problem takes as inputs a dispersion relation E_mathbfk for the noninteracting electrons, a complex self-energy function Sigma(varepsilon) describing the scattering at energy varepsilon, a density n of electrons per surface unit, and a temperature T. The outputs are a chemical potential mu, normal conductivities sigma_xx and  sigma_yy, and a Hall conductivity sigma_xy. This problem is defined by the following set of coupled equations:","category":"page"},{"location":"index.html","page":"MagnetoTransport","title":"MagnetoTransport","text":"beginalign*\n(1)N_0(E)=2intfracd^2k(2pi)^2deltaleft(E-E_mathbfkright)\n(2)Phi_xy(E)=left(fracehbarright)^22intfracd^2k(2pi)^2\nleft(fracpartial E_mathbfkpartial k_xyright)^2\ndelta(E-E_mathbfk)\n(3)Phi_xy(E)=left(fracehbarright)^3frac2pi^23\nintfracd^2k(2pi)^2left2fracpartial E_mathbfkpartial k_x\nfracpartial E_mathbfkpartial k_y\nfracpartial^2E_mathbfkpartial k_xpartial k_yright\nhspace11emleft-left(fracpartial E_mathbfkpartial k_xright)^2\nfracpartial^2E_mathbfkpartial k_y^2\n-left(fracpartial E_mathbfkpartial k_yright)^2\nfracpartial^2E_mathbfkpartial k_x^2rightdelta(E-E_mathbfk)\n(4)A(Evarepsilon)=frac-mathrmImSigma(varepsilon)pi\nvarepsilon-E-mathrmReSigma(varepsilon)^2\n+mathrmImSigma(varepsilon)^2\n(5)N(varepsilon)=int_-infty^inftydEN_0(E)A(Evarepsilon)\n(6)n=int_-infty^inftydvarepsilonfracN(varepsilon)\nmathrme^(varepsilon-mu)k_mathrmBT+1\n(7)sigma_xxyy=pihbarint_-infty^inftydvarepsilon\nfrac1k_mathrmBTfracmathrme^(varepsilon-mu)k_mathrmBT\nmathrme^(varepsilon-mu)k_mathrmBT+1^2\nint_-infty^inftydEPhi_xy(E)A^2(Evarepsilon)\n(8)sigma_xy=Bhbarint_-infty^inftydvarepsilon\nfrac1k_mathrmBTfracmathrme^(varepsilon-mu)k_mathrmBT\nmathrme^(varepsilon-mu)k_mathrmBT+1^2\nint_-infty^inftydEPhi_xy(E)A^3(Evarepsilon)\nendalign*","category":"page"},{"location":"index.html","page":"MagnetoTransport","title":"MagnetoTransport","text":"In these equations, e is the elementary charge, hbar is the reduced Planck constant, k_mathrmB is the Boltzmann constant, delta(cdot) is the Dirac delta function, and B is the magnetic field. Note that these equations require the dispersion relation E_mathbfk to be twice differentiable and the function Sigma(varepsilon) to be causal, i.e., its real and imaginary parts must obey Kramers-Kronig relations.","category":"page"},{"location":"index.html#Formulation-in-terms-of-integral-transforms","page":"MagnetoTransport","title":"Formulation in terms of integral transforms","text":"","category":"section"},{"location":"index.html","page":"MagnetoTransport","title":"MagnetoTransport","text":"The problem can be reformulated as","category":"page"},{"location":"index.html","page":"MagnetoTransport","title":"MagnetoTransport","text":"beginalign*\n(5)N(varepsilon)=-frac1pimathrmIm(Hcirc N_0)\nbig(varepsilon-Sigma(varepsilon)big)\n(6)n=int_-infty^0dvarepsilonN(mu+varepsilon)\n+int_0^inftydvarepsilonfrac1\nmathrme^varepsilonk_mathrmBT+1\nleftN(mu+varepsilon)-N(mu-varepsilon)right\n(7)sigma_xxyy=frace^2h2pi^2int_-infty^inftydvarepsilon\nfrac1k_mathrmBTfracmathrme^(varepsilon-mu)k_mathrmBT\nmathrme^(varepsilon-mu)k_mathrmBT+1^2\n(L^2circPhi_0^xy)big(varepsilonSigma(varepsilon)big)\n(8)sigma_xy=Bfrace^3h^24pi^2\nint_-infty^inftydvarepsilon\nfrac1k_mathrmBTfracmathrme^(varepsilon-mu)k_mathrmBT\nmathrme^(varepsilon-mu)k_mathrmBT+1^2\n(L^3circPhi_1)big(varepsilonSigma(varepsilon)big)\nendalign*","category":"page"},{"location":"index.html","page":"MagnetoTransport","title":"MagnetoTransport","text":"where h=2pihbar is the Planck constant. The complex function of a complex variable (Hcirc N_0)(z) is the Hilbert transform of the function N_0(E), which is defined as","category":"page"},{"location":"index.html","page":"MagnetoTransport","title":"MagnetoTransport","text":"\t(Hcirc N_0)(z)=int_-infty^inftydEfracN_0(E)z-E","category":"page"},{"location":"index.html","page":"MagnetoTransport","title":"MagnetoTransport","text":"for zinmathbbCsetminusmathbbR. The real functions (L^2circPhi_0^xy)(rz) and (L^3circPhi_1)(rz)  of one real variable r and one complex variable z are the order-2 and order-3 Lorentz transforms of the functions Phi_0^xy(E)=Phi_xy(E)(ehbar)^2 and Phi_1(E)=Phi_xy(E)(ehbar)^3, which are defined as","category":"page"},{"location":"index.html","page":"MagnetoTransport","title":"MagnetoTransport","text":"beginalign*\n\t(L^2circPhi_0^xy)(rz)=int_-infty^inftydE\n\tPhi_0^xy(E)leftfrac-mathrmImzpi\n\t(r-mathrmRez-E)^2+(mathrmImz)^2right^2\n\t(L^3circPhi_1)(rz)=int_-infty^inftydE\n\tPhi_1(E)leftfrac-mathrmImzpi\n\t(r-mathrmRez-E)^2+(mathrmImz)^2right^3\nendalign*","category":"page"},{"location":"index.html","page":"MagnetoTransport","title":"MagnetoTransport","text":"In this formulation, the problem takes the four functions (Hcirc N_0), (L^2circPhi_0^xy), and (L^3circPhi_1) as inputs, instead of the dispersion relation E_mathbfk. These four functions only depend on E_mathbfk, not on the other inputs Sigma(varepsilon), n, and T.","category":"page"},{"location":"index.html#Implementation","page":"MagnetoTransport","title":"Implementation","text":"","category":"section"},{"location":"index.html","page":"MagnetoTransport","title":"MagnetoTransport","text":"The Julia modules Piecewise, PiecewiseHilbert, and PiecewiseLorentz provide tools for representing the functions N_0(E), Phi_0^xy(E), and Phi_1(E) as PiecewiseFunction objects and for constructing HilbertTransform and LorentzTransform objects holding their Hilbert and Lorentz transforms.","category":"page"},{"location":"index.html","page":"MagnetoTransport","title":"MagnetoTransport","text":"Inverting equation (6) to determine mu is the most time-consuming part of the calculation. The first term in the right-hand side of equation (6) is the value of n at temperature T=0, while the second term is a correction only needed if T0. The method number returns n for a given mu and the method chemical_potential returns mu for a given n. If an estimate of μ is available, it can be supplied using the optional keyword argument μ0. The method σ₀ returns sigma_xx or sigma_yy divided by e^2h, depending on which Lorentz transform is passed as the argument L2oPhi0. The method σ₁ returns sigma_xyB divided by e^3h^2. The method RH returns the Hall constant R_mathrmH=fracsigma_xyBsigma_xxsigma_yy divided by 1e. The methods σ₀, σ₁, and RH take either the density n as the first argument, in which case they use chemical_potential to determine mu, or take the chemical potential mu as the first argument.","category":"page"},{"location":"index.html","page":"MagnetoTransport","title":"MagnetoTransport","text":"Simplifications occur at T=0, since the integrals in equations (7) and (8) become trivial. The expressions (6), (7), and (8) are replaced at T=0 by","category":"page"},{"location":"index.html","page":"MagnetoTransport","title":"MagnetoTransport","text":"beginalign*\n(6)n=int_-infty^0dvarepsilonN(mu+varepsilon)\n(7)sigma_xxyy=frace^2h2pi^2\n(L^2circPhi_0^xy)big(muSigma(mu)big)\n(8)sigma_xyB=frace^3h^24pi^2\n(L^3circPhi_1)big(muSigma(mu)big)\nendalign*","category":"page"},{"location":"index.html","page":"MagnetoTransport","title":"MagnetoTransport","text":"Hence, thanks to the use of Hilbert and Lorentz transforms, the numerical work at T=0 is reduced to a single quadrature nested in a root-finding algorithm for solving equation (6), while equations (7) and (8) are straight evaluations of mathematical functions. Additional quadratures are required if T0 in equations (6), (7) and (8), but those are exponentially convergent at varepsilon=infty.","category":"page"},{"location":"index.html#Example","page":"MagnetoTransport","title":"Example","text":"","category":"section"},{"location":"index.html","page":"MagnetoTransport","title":"MagnetoTransport","text":"The following example uses piecewise linear toy models for the functions N_0(E), Phi_0^xy(E), and Phi_1(E), that are not deduced from an underlying dispersion relation E_mathbfk:","category":"page"},{"location":"index.html","page":"MagnetoTransport","title":"MagnetoTransport","text":"using Piecewise # hide\nN₀ = PiecewiseFunction(:even, Piece((0, 1), POLY, [1]))\nΦ₀ = PiecewiseFunction(:even, Piece((0, 1), POLY, [1, -1]))\nΦ₁ = 2 * π^2 / 3 * PiecewiseFunction(:odd,\n    [Piece((0, 0.5), POLY, [0, 1]), Piece((0.5, 1), POLY, [1, -1])])\nnothing # hide","category":"page"},{"location":"index.html","page":"MagnetoTransport","title":"MagnetoTransport","text":"N_0(E) has the shape of a rectangle: it equals one if -1E1 and zero otherwise. Phi_0^x(E)=Phi_0^y(E) is an even function of E with the shape of a triangle, Phi_1(E) is an odd function of E made of two triangles, and both of them vanish if E1. The following code draws these functions on a graph p1:","category":"page"},{"location":"index.html","page":"MagnetoTransport","title":"MagnetoTransport","text":"using Piecewise # hide\nusing Plots, LaTeXStrings, Measures\ndefault(linewidth=3, legendfontsize=12) # hide\nN₀ = PiecewiseFunction(:even, Piece((0, 1), POLY, [1])) # hide\nΦ₀ = PiecewiseFunction(:even, Piece((0, 1), POLY, [1, -1])) # hide\nΦ₁ = 2 * π^2 / 3 * PiecewiseFunction(:odd, # hide\n    [Piece((0, 0.5), POLY, [0, 1]), Piece((0.5, 1), POLY, [1, -1])]) # hide\nE = -2:0.001:2\np1 = plot(xlabel=L\"E\", legend=:bottomright)\nplot!(p1, E, N₀.(E), label=L\"N_0(E)\")\nplot!(p1, E, Φ₀.(E), label=L\"\\Phi_0(E)\")\nplot!(p1, E, Φ₁.(E), label=L\"\\Phi_1(E)\")\nnothing # hide","category":"page"},{"location":"index.html","page":"MagnetoTransport","title":"MagnetoTransport","text":"A causal self-energy may be deduced from a scattering rate Gamma(E) according to","category":"page"},{"location":"index.html","page":"MagnetoTransport","title":"MagnetoTransport","text":"\tSigma(varepsilon)=int_-infty^inftydE\n\tfracGamma(E)varepsilon-E+i0^+\n\t=(HcircGamma)(varepsilon+i0^+)","category":"page"},{"location":"index.html","page":"MagnetoTransport","title":"MagnetoTransport","text":"This expression obeys Kramers-Kronig relations by construction. Gamma(E) must be positive, such that mathrmImSigma(varepsilon)=-piGamma(varepsilon) is negative. A toy model is used here for Gamma(E), which is an even function of E vanishing as a square root at E=15. The following code defines Sigma(varepsilon) and draws it on a graph p2:","category":"page"},{"location":"index.html","page":"MagnetoTransport","title":"MagnetoTransport","text":"using Piecewise, PiecewiseHilbert # hide\nusing Plots, LaTeXStrings, Measures # hide\ndefault(linewidth=3, legendfontsize=12) # hide\nE = -2:0.001:2 # hide\nHoΓ = HilbertTransform(PiecewiseFunction(:even,\n    Piece((0, 1.5), (true, false), PLS, [1.5, 0.5, 0.001])))\nΣ(ε) = HoΓ(ε + im * eps(Float64))\n\np2 = plot(xlabel=L\"\\varepsilon\", legend=:topleft)\nplot!(p2, E, real.(Σ.(E)), label=L\"\\mathrm{Re}\\,\\Sigma(\\varepsilon)\")\nplot!(p2, E, imag.(Σ.(E)), label=L\"\\mathrm{Im}\\,\\Sigma(\\varepsilon)\")\nnothing # hide","category":"page"},{"location":"index.html","page":"MagnetoTransport","title":"MagnetoTransport","text":"At this point, the interacting density of states N(varepsilon) can be deduced according to equation (5). The following code defines N(varepsilon), draws it on a graph p3, and displays the three graphs:","category":"page"},{"location":"index.html","page":"MagnetoTransport","title":"MagnetoTransport","text":"using Piecewise, PiecewiseHilbert # hide\nusing Plots, LaTeXStrings, Measures # hide\ndefault(linewidth=3, legendfontsize=12) # hide\nN₀ = PiecewiseFunction(:even, Piece((0, 1), POLY, [1])) # hide\nΦ₀ = PiecewiseFunction(:even, Piece((0, 1), POLY, [1, -1])) # hide\nΦ₁ = 2 * π^2 / 3 * PiecewiseFunction(:odd, # hide\n    [Piece((0, 0.5), POLY, [0, 1]), Piece((0.5, 1), POLY, [1, -1])]) # hide\nE = -2:0.001:2 # hide\np1 = plot(xlabel=L\"E\", legend=:bottomright) # hide\nplot!(p1, E, N₀.(E), label=L\"N_0(E)\") # hide\nplot!(p1, E, Φ₀.(E), label=L\"\\Phi_0(E)\") # hide\nplot!(p1, E, Φ₁.(E), label=L\"\\Phi_1(E)\") # hide\nHoΓ = HilbertTransform(PiecewiseFunction(:even, # hide\n    Piece((0, 1.5), (true, false), PLS, [1.5, 0.5, 0.001]))) # hide\nΣ(ε) = HoΓ(ε + im * eps(Float64)) # hide\np2 = plot(xlabel=L\"\\varepsilon\", legend=:topleft) # hide\nplot!(p2, E, real.(Σ.(E)), label=L\"\\mathrm{Re}\\,\\Sigma(\\varepsilon)\") # hide\nplot!(p2, E, imag.(Σ.(E)), label=L\"\\mathrm{Im}\\,\\Sigma(\\varepsilon)\") # hide\nHoN₀ = HilbertTransform(N₀)\nN(ε) = -imag(HoN₀(ε - Σ(ε))) / π\n\np3 = plot(xlabel=L\"\\varepsilon\", legend=:bottom)\nplot!(p3, E, N.(E), label=L\"N(\\varepsilon)\")\n\nplot(p1, p2, p3, layout=(1, 3), size = (1000, 300), margins=4mm)\n\nsavefig(\"model.svg\"); nothing # hide","category":"page"},{"location":"index.html","page":"MagnetoTransport","title":"MagnetoTransport","text":"(Image: )","category":"page"},{"location":"index.html","page":"MagnetoTransport","title":"MagnetoTransport","text":"The following code defines the LorentzTransform objects and then computes mu, sigma_xx, and sigma_xyB at T=0 versus nin10^-310^-1. These data are put on the graphs p1 and p2.","category":"page"},{"location":"index.html","page":"MagnetoTransport","title":"MagnetoTransport","text":"using Piecewise, PiecewiseHilbert, PiecewiseLorentz # hide\nusing MagnetoTransport # hide\nusing Plots, LaTeXStrings, Measures # hide\ndefault(linewidth=3, legendfontsize=12) # hide\nN₀ = PiecewiseFunction(:even, Piece((0, 1), POLY, [1])) # hide\nΦ₀ = PiecewiseFunction(:even, Piece((0, 1), POLY, [1, -1])) # hide\nΦ₁ = 2 * π^2 / 3 * PiecewiseFunction(:odd, # hide\n    [Piece((0, 0.5), POLY, [0, 1]), Piece((0.5, 1), POLY, [1, -1])]) # hide\nHoΓ = HilbertTransform(PiecewiseFunction(:even, # hide\n    Piece((0, 1.5), (true, false), PLS, [1.5, 0.5, 0.001]))) # hide\nΣ(ε) = HoΓ(ε + im * eps(Float64)) # hide\nHoN₀ = HilbertTransform(N₀) # hide\nL²oΦ₀ = LorentzTransform(Φ₀, 2)\nL³oΦ₁ = LorentzTransform(Φ₁, 3)\n\nn = 10 .^ (-3:0.02:-1)\nμ = chemical_potential.(n, 0, HoN₀, Σ)\nσxx = σ₀.(μ, 0, L²oΦ₀, Σ)\nσxy = σ₁.(μ, 0, L³oΦ₁, Σ)\n\np1 = plot(n, μ, label=L\"\\mu(T=0)\", xlabel=L\"n\", xscale=:log10)\np2 = plot(xlabel=L\"n\", xscale=:log10, yscale=:log10, legend=:bottomright)\nplot!(p2, n,  σxx, label=L\"\\sigma_{xx}(T=0)\")\nplot!(p2, n, -σxy, label=L\"-\\sigma_{xy}(T=0)/B\")\nnothing # hide","category":"page"},{"location":"index.html","page":"MagnetoTransport","title":"MagnetoTransport","text":"Now the values of sigma_xx and sigma_xyB can be used to deduce the Hall constant R_mathrmH=sigma_xyBsigma_xx^2. Because the scattering is weak, R_mathrmH approaches -1(en) at large n, but deviates at low n, where it varies nonmonotonously with increasing temperature.","category":"page"},{"location":"index.html","page":"MagnetoTransport","title":"MagnetoTransport","text":"ENV[\"GKSwstype\"] = \"100\" # hide\nusing Piecewise, PiecewiseHilbert, PiecewiseLorentz # hide\nusing MagnetoTransport # hide\nusing Plots, LaTeXStrings, Measures # hide\ndefault(linewidth=3, legendfontsize=12) # hide\nN₀ = PiecewiseFunction(:even, Piece((0, 1), POLY, [1])) # hide\nΦ₀ = PiecewiseFunction(:even, Piece((0, 1), POLY, [1, -1])) # hide\nΦ₁ = 2 * π^2 / 3 * PiecewiseFunction(:odd, # hide\n    [Piece((0, 0.5), POLY, [0, 1]), Piece((0.5, 1), POLY, [1, -1])]) # hide\nHoΓ = HilbertTransform(PiecewiseFunction(:even, # hide\n    Piece((0, 1.5), (true, false), PLS, [1.5, 0.5, 0.001]))) # hide\nΣ(ε) = HoΓ(ε + im * eps(Float64)) # hide\nHoN₀ = HilbertTransform(N₀) # hide\nL²oΦ₀ = LorentzTransform(Φ₀, 2) # hide\nL³oΦ₁ = LorentzTransform(Φ₁, 3) # hide\nn = 10 .^ (-3:0.02:-1) # hide\nμ = chemical_potential.(n, 0, HoN₀, Σ) # hide\nσxx = σ₀.(μ, 0, L²oΦ₀, Σ) # hide\nσxy = σ₁.(μ, 0, L³oΦ₁, Σ) # hide\np1 = plot(n, μ, label=L\"\\mu(T=0)\", xlabel=L\"n\", xscale=:log10) # hide\np2 = plot(xlabel=L\"n\", xscale=:log10, yscale=:log10, legend=:bottomright) # hide\nplot!(p2, n,  σxx, label=L\"\\sigma_{xx}(T=0)\") # hide\nplot!(p2, n, -σxy, label=L\"-\\sigma_{xy}(T=0)\") # hide\np3 = plot(xlabel=L\"n\", xscale=:log10, yscale=:log10)\nplot!(p3, [3e-3, 1e-1], 1 ./ [3e-3, 1e-1], lw=1, label=L\"1/n\")\nplot!(p3, n, .- σxy ./ σxx .^2, label=L\"-R_\\mathrm{H}(T=0)\")\nplot!(p3, n, .- RH.(n, 0.001, L²oΦ₀, L³oΦ₁, Σ, HoN₀, tol=1e-5),\n    label=L\"-R_\\mathrm{H}(T=10^{-3})\")\nplot!(p3, n, .- RH.(n, 0.01, L²oΦ₀, L³oΦ₁, Σ, HoN₀, tol=1e-5),\n    label=L\"-R_\\mathrm{H}(T=10^{-2})\")\n\nplot(p1, p2, p3, layout=(1, 3), size = (1000, 300), margins=4mm)\n\nsavefig(\"RH.svg\"); nothing # hide","category":"page"},{"location":"index.html","page":"MagnetoTransport","title":"MagnetoTransport","text":"(Image: )","category":"page"},{"location":"index.html#Public-interface","page":"MagnetoTransport","title":"Public interface","text":"","category":"section"},{"location":"index.html#Index","page":"MagnetoTransport","title":"Index","text":"","category":"section"},{"location":"index.html","page":"MagnetoTransport","title":"MagnetoTransport","text":"Pages   = [\"index.md\"]\nModules = [MagnetoTransport]\nOrder   = [:function]","category":"page"},{"location":"index.html#Methods","page":"MagnetoTransport","title":"Methods","text":"","category":"section"},{"location":"index.html","page":"MagnetoTransport","title":"MagnetoTransport","text":"number\nchemical_potential\nσ₀\nσ₁\nRH","category":"page"},{"location":"index.html#MagnetoTransport.number","page":"MagnetoTransport","title":"MagnetoTransport.number","text":"number(μ, T, HoN0, Σ [, tol])\n\nParticle number for chemical potential μ and temperature T (energy units). HoN0 is a HilbertTransform object holding the Hilbert transform of the density of states. Σ(::Real) is a function giving the self-energy. tol sets the relative tolerance of the quadratures (default 1e-8).\n\n\n\n\n\nnumber(μ, T, HoN0 [, tol])\n\nParticle number for chemical potential μ and temperature T (energy units) in the noninteracting case (Sigma(varepsilon)=-i0^+). HoN0 is a HilbertTransform object holding the Hilbert transform of the density of states. tol sets the relative tolerance of the quadratures (default 1e-8).\n\n\n\n\n\n","category":"function"},{"location":"index.html#MagnetoTransport.chemical_potential","page":"MagnetoTransport","title":"MagnetoTransport.chemical_potential","text":"chemical_potential(n, T, HoN0, Σ [, μ0] [, tol])\n\nChemical potential for density n and temperature T (energy units). HoN0 is a HilbertTransform object holding the Hilbert transform of the density of states. Σ(::Real) is a function giving the self-energy. μ0 is an optional initial estimate. tol sets the relative tolerance of the quadratures and root finding (default 1e-8).\n\n\n\n\n\nchemical_potential(n, T, HoN0 [, μ0] [, tol])\n\nChemical potential for density n and temperature T (energy units) in the noninteracting case (Sigma(varepsilon)=-i0^+). HoN0 is a HilbertTransform object holding the Hilbert transform of the density of states. μ0 is an optional initial estimate. tol sets the relative tolerance of the quadratures and root finding (default 1e-8).\n\n\n\n\n\n","category":"function"},{"location":"index.html#MagnetoTransport.σ₀","page":"MagnetoTransport","title":"MagnetoTransport.σ₀","text":"σ₀(n, T, L2oPhi0, Σ, HoN0 [, εmin] [, εmax] [, μ0] [, tol])\n\nNormal conductivity in units of e^2h for density n and temperature T (energy units). L2oPhi0 is a LorentzTransform object holding the L^2 transform of the transport function divided by (ehbar)^2. Σ(::Real) is a function giving the self-energy. HoN0 is a HilbertTransform object holding the Hilbert transform of the density of states. εmin and εmax are optional limits of integration at finite-T (default -Inf and +Inf). μ0 is an optional initial estimate for the chemical potential. tol sets the relative tolerance of the quadratures and root finding (default 1e-8).\n\n\n\n\n\nσ₀(μ, T, L2oPhi0, Σ [, εmin] [, εmax] [, tol])\n\nNormal conductivity in units of e^2h for chemical potential μ and temperature T (energy units). L2oPhi0 is a LorentzTransform object holding the L^2 transform of the transport function divided by (ehbar)^2. Σ(::Real) is a function giving the self-energy. εmin and εmax are optional limits of integration at finite-T (default -Inf and +Inf). tol sets the relative tolerance of the quadrature (default 1e-8). \n\n\n\n\n\n","category":"function"},{"location":"index.html#MagnetoTransport.σ₁","page":"MagnetoTransport","title":"MagnetoTransport.σ₁","text":"σ₁(n, T, L3oPhi1, Σ, HoN0 [, εmin] [, εmax] [, μ0] [, tol])\n\nHall conductivity divided by Be^3h^2 for density n and temperature T (energy units). L3oPhi1 is a LorentzTransform object holding the L^3 transform of the transport function divided by (ehbar)^3. Σ(::Real) is a function giving the self-energy. HoN0 is a HilbertTransform object holding the Hilbert transform of the density of states. εmin and εmax are optional limits of integration at finite-T (default -Inf and +Inf). μ0 is an optional initial estimate for the chemical potential. tol sets the relative tolerance of the quadratures and root finding (default 1e-8).\n\n\n\n\n\nσ₁(μ, T, L3oPhi1, Σ [, εmin] [, εmax] [, tol])\n\nHall conductivity divided by Be^3h^2 for chemical potential μ and temperature T (energy units). L3oPhi1 is a LorentzTransform object holding the L^3 transform of the transport function divided by (ehbar)^3. Σ(::Real) is a function giving the self-energy. εmin and εmax are optional limits of integration at finite-T (default -Inf and +Inf). tol sets the relative tolerance of the quadrature (default 1e-8).\n\n\n\n\n\n","category":"function"},{"location":"index.html#MagnetoTransport.RH","page":"MagnetoTransport","title":"MagnetoTransport.RH","text":"RH(n, T, L2oPhi01 [, L2oPhi02], L3oPhi1, Σ, HoN0 [, εmin] [, εmax] [, μ0] [, tol])\n\nHall constant multiplied by e for density n and temperature T (energy units). L2oPhi01, L2oPhi02, and L3oPhi1 are LorentzTransform objects holding the L^2 and L^3 transforms of the transport functions. Σ(::Real) is a function giving the self-energy. HoN0 is a HilbertTransform object holding the Hilbert transform of the density of states. εmin and εmax are optional limits of integration at finite-T (default -Inf and +Inf). μ0 is an optional initial estimate for the chemical potential. tol sets the relative tolerance of the quadratures and root finding (default 1e-8).\n\n\n\n\n\nRH(μ, T, L2oPhi01 [, L2oPhi02], L3oPhi1, Σ [, εmin] [, εmax] [, tol])\n\nHall constant multiplied by e for chemical potential μ and temperature T (energy units). L2oPhi01, L2oPhi02, and L3oPhi1 are LorentzTransform objects holding the L^2 and L^3 transforms of the transport functions. Σ(::Real) is a function giving the self-energy. εmin and εmax are optional limits of integration at finite-T (default -Inf and +Inf). tol sets the relative tolerance of the quadratures (default 1e-8).\n\n\n\n\n\n","category":"function"}]
}
